/*
 Задача 1

 История

 Вы разрабатываете спутник для полёта на Европу — спутник Юпитера. В вашей команде два учёных по космодинамике. Вы даёте каждому из них задачу — расcчитать количество топлива для достижения спутником цели.

 Данные, которые они получают, — это вес спутника и длина полёта. Они должны вам предоставить свои алгоритмы расчёта расхода топлива — это ваши замыкания. А вы по готовности алгоритмов делаете обработку данных и сравниваете результат — это ваша функция.

 Алгоритм выполнения

 Написать функцию со входящим параметром — замыкание (тип указан выше). Функция должна выводить в консоль результат выполнения замыкания.
 Написать два замыкания (тип указан выше). Внутри должна быть математическая операция на ваш выбор над входящими значениями.
 Вызвать функцию для первого замыкания и потом для второго замыкания.
 Выполнить задание, не сокращая синтаксис языка.
 */

import Foundation

typealias Kg = Double
typealias Km = Double
typealias L = Double

func calculateFuelUsage(closure: (Double, Double) -> Double) {
    let weight: Kg = 42
    let distance: Km = 628_700_000
    let fuel = closure(weight, distance)
    print("Для полета на Европу спутника весом \(weight) кг требуется \(fuel) литров топлива")
}

let firstAlgorithm = { (weight: Double, distance: Double) -> Double in
    let fuel = weight * (distance/1_000_000.0)
    return fuel
}

let secondAlgorithm = { (weight: Double, distance: Double) -> Double in
    let fuel = weight * distance * distance / 1_000_000_000_000.0
    return fuel
}

calculateFuelUsage(closure: firstAlgorithm)
calculateFuelUsage(closure: secondAlgorithm)



/*
 Задача 2

 История

 В вашем конструкторском бюро случилось ЧП, и все компьютеры вышли из строя, но последние алгоритмы вы помните.

 Вы намерены добраться до ближайшего компьютера в соседнем селе и восстановить из своей памяти нужные данные.

 Ваша задача — запомнить максимально краткую форму записи алгоритмов, чтобы всё не смешалось в голове.

 Алгоритм выполнения

 Представить задание 1 в сокращённом виде (см. пункт лекции «Сокращения для замыканий»).
 */

let firstAlgorithmShort = { weight, distance in weight * distance / 1_000_000.0
}

let secondAlgorithmShort = { weight, distance in weight * distance * distance / 1_000_000_000_000.0
}

calculateFuelUsage(closure: firstAlgorithmShort)
calculateFuelUsage(closure: secondAlgorithmShort)


/*
 Задача 3* (задача со звёздочкой)

 История

 Пока вы добирались до села с компьютером, вам пришла в голову мысль своего алгоритма.

 Вы решили использовать свою функцию для проверки гипотезы и стали набирать алгоритм прямо в ней — реализация замыкания вместо параметра.

 Алгоритм выполнения

 Вызвать функцию из задания 1, определив ей замыкание самостоятельно, не передавая.

 Объяснить, куда и почему исчезло ключевое слово ('param' — в примере) для параметра.

 Пример:

 func example(param: () -> Void) {
     // ...
 }
     
 example {
     // ...
 }
*/

calculateFuelUsage(closure:{weight, distance in weight * distance / 1_000_000.0})

calculateFuelUsage {
    weight, distance in weight * distance / 1_000_000.0
}
